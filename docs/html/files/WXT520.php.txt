<?php
 /**
  * WXT520 Parser
  *
  * @file WXT520.php
  * @date 2015-09-29 12:24 PDT
  * @author Paul Reuter
  * @version 1.1.5
  *
  * @modifications <pre>
  * 1.0.0 - 2010-10-04 - Created
  * 1.0.1 - 2010-10-04 - Debugged lightly, flatten
  * 1.0.2 - 2010-10-06 - Add: getRowsByTimeRange($t0,$t1); getColumns all.
  * 1.0.3 - 2010-10-06 - Add: getRow, getRows() for completeness
  * 1.0.4 - 2010-10-13 - Add: getDefaultUnit, getAlternateUnit
  * 1.0.5 - 2010-10-13 - Add: getVarMap() for non-file reading metadata.
  * 1.0.6 - 2010-10-15 - BugFix: vname might not be set.
  * 1.0.7 - 2011-06-21 - Modify: getColumn(s): if field not found, null val.
  * 1.0.8 - 2012-02-29 - Modify: Allow parser to skip prepended fields.
  * 1.0.9 - 2012-03-23 - Modify: Autodetect indexes.
  * 1.1.0 - 2015-01-13 - Modify: Ignore "Invalid" data types (unit=#)
  * 1.1.1 - 2015-01-14 - Modify: autodetect begins on second line, not first.
  * 1.1.2 - 2015-01-14 - Modify: autodetect tries to detect with first 5 lines.
  * 1.1.3 - 2015-01-20 - BugFix: strict line parsing. avoid incomplete resets.
  * 1.1.4 - 2015-01-22 - BugFix: usort doesn't preserve order. don't sort.
  * 1.1.5 - 2015-09-29 - Modify: Unit labels are UTF-8, not ISO-8859-1.
  * </pre>
  */

// For reference, SIO Met station:
//define("DATA_DIR","/data/InSitu/NetworkLogging/Data/airmar/132.239.117.235");

/**
 * Parse WXT520 ASCII output.
 * @package Parser
 */
class WXT520 {
  var $table;  // last data set parsed
  var $header; // Union of all headers present
  var $errors; // Array of lines generating an error
  var $_timeIx = 0;
  var $_channelIx = 1;
  var $_bAutodetect = true;

  var $_mapUnit_1 = array(
    "#" => "Invalid",
    "M" => "m/s",
    "K" => "km/h",
    "S" => "mph",
    "N" => "knots"
  );
  var $_mapUnit_2 = array(
    "#" => "Invalid",
    "D" => "deg_N"
  );
  var $_mapUnit_3 = array(
    "#" => "Invalid",
    "H" => "hPa",
    "P" => "Pa",
    "B" => "bar",
    "M" => "mmHg"
  );
  var $_mapUnit_4 = array(
    "#" => "Invalid",
    "C" => "\xB0C",
    "F" => "\xB0F"
  );
  var $_mapUnit_5 = array (
    "#" => "Invalid",
    "P" => "%"
  );
  var $_mapUnit_6 = array (
    "#" => "Invalid",
    "M" => "mm",
    "I" => "in"
  );
  var $_mapUnit_7 = array (
    "#" => "Invalid",
    "S" => "s"
  );
  var $_mapUnit_8 = array (
    "#" => "Invalid",
    "M" => "mm/h",
    "I" => "in/h"
  );
  var $_mapUnit_9 = array (
    "#" => "Invalid",
    "M" => "hits/cm2",
    "I" => "hits/in2",
    "H" => "hits",
  );
  var $_mapUnit_10 = array (
    "#" => "Invalid",
    "M" => "hits/cm2/h",
    "I" => "hits/in2/h",
    "H" => "hits/h",
  );
  var $_mapUnit_11 = array(
    "#" => "V",
    "N" => "V",
    "V" => "V",
    "W" => "V",
    "F" => "V"
  );
  var $_mapUnit_11_fn = array (
    "#" => "Not Available",
    "N" => "Disabled by User OR V > High",
    "V" => "50% Duty Cycle; Mid < V < High",
    "W" => "100% Duty Cycle; Low < V < Mid",
    "F" => "50% Duty Cycle; V < Low"
  );
  var $_mapUnit_12 = array(
    "V" => "V"
  );


  var $_mapVar = array(
    "Sn" => array("Wind Speed Minimum",1),
    "Sm" => array("Wind Speed Average",1),
    "Sx" => array("Wind Speed Maximum",1),
    "Dn" => array("Wind Direction Minimum",2),
    "Dm" => array("Wind Direction Average",2),
    "Dx" => array("Wind Direction Maximum",2),
    "Pa" => array("Air Pressure",3),
    "Ta" => array("Air Temperature",4),
    "Tp" => array("Internal Temperature",4),
    "Ua" => array("Relative Humidity",5),
    "Rc" => array("Rain Accumulation",6),
    "Rd" => array("Rain Duration",7),
    "Ri" => array("Rain Intensity",8),
    "Rp" => array("Rain Peak Intensity",8),
    "Hc" => array("Hail Accumulation",9),
    "Hd" => array("Hail Duration",7),
    "Hi" => array("Hail Intensity",10),
    "Hp" => array("Hail Peak Intensity",10),
    "Th" => array("Heating Temperature",4),
    "Vh" => array("Heating Voltage",11,11),
    "Vs" => array("Supply Voltage",12),
    "Vr" => array("3.5 V Ref. Voltage",12),
    "Id" => array("Information Field",null),
  );


  var $_i; // internal row pointer


  function WXT520() { 
    $this->m_timeRange = array(null,null);
    return $this;
  } // END: function WXT520()

  function setTimeIndex($i) { 
    $this->_timeIx = ($i);
    return ($i>=0);
  } // END: function setTimeIndex($i)

  function setChannelIndex($i) { 
    $this->_channelIx = $i;
    return ($i>=0);
  } // END: function setChannelIndex($i)

  function setAutodetect($b=true) { 
    $this->_bAutodetect = ($b) ? true : false;
    return true;
  } // END: function setAutodetect($b=true)

  function getVarMap() { 
    $map = array();
    foreach( $this->_mapVar as $k=>$row ) { 
      $map[$k] = array(
        $k,
        utf8_encode($row[0]),
        utf8_encode($this->getDefaultUnit($k))
      );
    }
    return $map;
  } // END: function getVarMap()


  function getDefaultUnit($vname) { 
    if( !isset($this->_mapVar[$vname]) ) { 
      return null;
    }
    $property = "_mapUnit_".$this->_mapVar[$vname][1];
    if( isset($this->$property) && is_array($this->$property) ) { 
      foreach($this->$property as $k=>$v) { 
        if( $k!=='#' ) { 
          return $v;
        }
      }
    }
    return null;
  } // END: function getDefaultUnit($vname)


  function getAlternateUnit($vname) { 
    if( !isset($this->_mapVar[$vname]) ) { 
      return null;
    }
    $property = "_mapUnit_".$this->_mapVar[$vname][1];
    $first = false;
    if( isset($this->$property) && is_array($this->$property) ) { 
      foreach($this->$property as $k=>$v) { 
        if( $k!=='#' ) { 
          if( $first ) { 
            return $v;
          }
          $first = true;
        }
      }
    }
    return null;
  } // END: function getDefaultUnit($vname)


  function getUnit($vname,$key) {
    if( !isset($this->_mapVar[$vname]) ) { 
      return null;
    }
    $property = "_mapUnit_".$this->_mapVar[$vname][1];
    return $this->$property[$key];
  } // END: function getUnit($vname,$key)


  function getFootnote($vname,$key) {
    if( !isset($this->_mapVar[$vname]) ) { 
      return null;
    }
    $property = "_mapUnit_".$this->_mapVar[$vname][1]."_fn";
    return $this->$property[$key];
  } // END: function getFootnote($vname,$key)


  function setTimeRange($t0=null,$t1=null) { 
    $t0 = $this->m_strtotime($t0);
    $t1 = $this->m_strtotime($t1);
    $this->m_timeRange = array($t0,$t1);
    return true;
  } // END: function setTimeRange($t0=null,$t1=null)


  function getTitle($k) { 
    return (isset($this->_mapVar[$k])) ? $this->_mapVar[$k][0] : null;
  } // END: function getTitle($k)


  /**
   * Return the header as an array.
   */
  function getHeader() { 
    return $this->header;
  } // END: function getHeader()


  /**
   * Return an array of timestamps representing the data records (Eastern).
   * If setTimeRange was called, the returned result is limited to that range.
   */
  function getTimestamps() { 
    return $this->m_extractTimeRange($this->m_timeTable);
  } // END: function getTimestamps()


  /**
   * Return an array of values for $field.
   * If setTimeRange was called, the returned result is limited to that range.
   */
  function getColumn($field) {
    /*
    if( !in_array($field,$this->header) ) { 
      error_log("Field not found: $field");
      return false;
    }
    */
    $vect = array();
    foreach( $this->table as $record ) { 
      $vect[] = (isset($record[$field])) ? $record[$field] : null;
    }
    return $this->m_extractTimeRange($vect);
  } // END: function getColumn($field)


  /**
   * Return a table of values for 1 or more $field(s).
   * If setTimeRange was called, the returned result is limited to that range.
   */
  function getColumns() {
    if( func_num_args() == 0 )  {
      $fields = $this->getHeader();
    } else { 
      $fields = func_get_args();
      $fields = $this->m_flatten($fields);
    }
    /*
    foreach( $fields as $name ) {
      if( !in_array($name,$this->header) ) { 
        error_log("Field not found: $name");
        return false;
      }
    }
    */
    $mat = array();
    foreach( $this->table as $record ) { 
      $row = array();
      foreach( $fields as $k ) { 
        $row[] = (isset($record[$k])) ? $record[$k] : null;
      }
      $mat[] = $row;
    }
    return $this->m_extractTimeRange($mat);
  } // END: function getColumns($fields)


  function countRows() { 
    return count($this->table);
  }

  function getRow($i=null) { 
    if( $i===null ) { 
      $i = $this->_i;
      $this->_i += 1;
    }
    return (isset($this->table[$i])) ? $this->table[$i] : false;
  } // END: function getRow($i=null)


  function getRows() { 
    return $this->m_extractTimeRange($this->table);
  } // END: function getRows()


  function getRowsByTimeRange($t0=null,$t1=null) { 
    list($p0,$p1) = $this->m_timeRange;
    $this->setTimeRange($t0,$t1);
    $rows = $this->m_extractTimeRange($this->table);
    $this->setTimeRange($p0,$p1);
    return $rows;
  } // END: function getRowsByTimeRange($t0=null,$t1=null)


  function getRowByTime($ts) {
    $ts = $this->m_strtotime($ts);
    $ix = $this->m_bsearch($ts,$this->m_timeTable);
    if( $ix < 0 || $this->m_timeTable[$ix] !== $ts ) {
      return null;
    }
    return $this->table[$ix];
  } // END: function getRowByTime($ts)


  function getRowByTimeLTE($ts) {
    $ts = $this->m_strtotime($ts);
    $ix = $this->m_bsearch($ts,$this->m_timeTable);
    if( $ix < 0 ) {
      return null;
    }
    return $this->table[$ix];
  } // END: function getRowByTimeLTE($ts)


  function getRowByTimeGTE($ts) {
    $ts = $this->m_strtotime($ts);
    $ix = $this->m_bsearch($ts,$this->m_timeTable)+1;
    if( $ix >= count($this->m_timetable) ) { 
      return null;
    }
    return $this->table[$ix];
  } // END: function getRowByTimeGTE($ts)


  /**
   * Parse a file containing WXT520 ASCII output.
   *
   * @param string $fpath A file to parse.
   * @return array A table of data.
   */
  function parseFile($fpath) {
    if( !file_exists($fpath) ) { 
      return false;
    }
    return $this->parseData(file_get_contents($fpath));
  } // END: function parseFile($fpath)


  /**
   * Parse raw contents (output from a WXT520) in ASCII mode.
   *
   * @param string &$dat Raw contents of a data file.
   * @return array A table of data.
   */
  function parseData(&$dat) { 
    $header = array();
    $this->header = array();
    $this->table = array();
    $keys = array();
    $this->errors = array();
    $this->_i = 0;

    if( $this->_bAutodetect && !$this->m_autodetect($dat) ) { 
      error_log("Could not auto-detect format.");
      return false;
    }

    foreach( explode("\n",rtrim($dat)) as $line ) { 
      $row = $this->parseLine($line,$keys);
      if( $row===false ) { 
        $this->errors[] = $line;
        continue;
      }
      $this->table[] = $row;
    }
    $this->header = array_keys($keys);
    //usort($this->table,array($this,'m_tableSort'));

    // After sort, then compute timeTable.
    $this->m_timeTable = array();
    foreach($this->table as $row) {
      $this->m_timeTable[] = $this->m_strtotime($row['time']);
    }

    return $this->table;
  } // END: function parseData(&$dat)


  function m_autodetect(&$dat) {
    $matched = 0;
    $tries = 5;
    $ppos = 0;
    while( $matched!=2 && --$tries>=0 ) {
      $pos = strpos($dat,"\n",$ppos);
      if( $pos<$ppos || $pos===false ) {
        break;
      }
      $pos++;
      $line = trim(substr($dat,$ppos,$pos-$ppos));
      $ppos = $pos;

      $row = explode(',',$line);
      $matched = 0;
      foreach( array_keys($row) as $ix ) {
        if( preg_match('/^(\d+\-\d+\-\d+T\d+\:\d+(?:\:\d+)?Z)$/',$row[$ix]) ) {
          $this->_timeIx = $ix;
          $matched += 1;
          break;
        }
      }
      foreach( array_keys($row) as $ix ) {
        if( preg_match('/^(\d+[A-Z]\d+|0TX)$/',$row[$ix]) ) {
          $this->_channelIx = $ix;
          $matched += 1;
          break;
        }
      }
    }
    return ($matched==2);
  } // END: function m_autodetect(&$dat)


  /**
   * Parse a line of input.
   *
   * @access protected
   * @param string $line A line of text to parse
   * @param array &$keys An array to track parsed keys.
   * @return array|false Hash array of parsed content or false on error.
   */
  function parseLine($line,&$keys) {
    // The channel marks the beginning of the report stream.
    // Before the channel, we might have misc data prepended.
    // Extract prepended time, channel, data, skip misc prepended (like IP)
    $row = explode(',',$line,$this->_channelIx+2);
    $pat = '/^(\d+\-\d+\-\d+T\d+\:\d+(?:\:\d+)?Z)$/';
    if( count($row)!==($this->_channelIx+2)
    ||  empty($row[$this->_channelIx])
    ||  !preg_match($pat,$row[$this->_timeIx]) ) { 
      return false;
    }

    $ret = array(
      'time' => $row[$this->_timeIx],
      'channel' => $row[$this->_channelIx]
    );

    $pat = '/,?([A-Z][a-z])\=([+-]?\d*\.\d+|[+-]?\d+\.?\d*)([\#A-Za-z](?!\d))/';
    if( !preg_match_all($pat,$row[$this->_channelIx+1],$sets,PREG_SET_ORDER) ) { 
      return false;
    }
    foreach($sets as $set) { 
      if( $set[3]!=='#' ) {
        $ret[$set[1]] = $set[2];
      }
    }
    foreach( array_keys($ret) as $k ) { 
      $keys[$k] = true;
    }
    return $ret;
  } // END: function parseLine($line)


  function m_tableSort($a,$b) { 
    return ($a['time']==$b['time']) ? 0 : (($a['time']<$b['time']) ? -1 : +1);
  } // END: function m_tableSort($a,$b)


  /**
   * Convert a string to a timestamp (default timezone: Eastern).
   *
   * @param string|int|null $ts A timestamp, string time, or null.
   * @return mixed An epoch timestamp if time is valid time, $ts otherwise.
   */
  function m_strtotime($ts,$ref=null) {
    if( (string)intVal($ts)===(string)$ts ) { 
      return intVal($ts);
    }
    if( is_string($ts) ) { 
      $ref = ($ref===null) ? time() : $this->m_strtotime($ref);
      $pat = '/^(\d{4}\-\d{2}\-\d{2})T(\d{2}\:(\d{2})(?:\:\d{2})?)Z$/';
      if(preg_match($pat,$ts,$pts)) { 
        $ts = $pts[1].' '.$pts[2].' UTC';
      }
      return strtotime($ts,$ref);
    }
    return $ts;
  } // END: function m_strtotime($ts,$ref=null)


  /**
   * Extract the subset of values from array $a that represent:
   *  min_time <= a[i]'s time <= max_time.
   *
   * @param array $a An array of equal length ot $m_timeTable.
   * @return array A subset of values falling between m_timeRange[0] and [1].
   */
  function m_extractTimeRange($a) {
    if( $this->m_timeRange[0] !== null ) { 
      // don't worry if left item > min time... that's what we want anyway.
      $lo = max(0,$this->m_bsearch($this->m_timeRange[0],$this->m_timeTable));
      array_splice($a,0,$lo);
    }
    if( $this->m_timeRange[1] !== null ) {
      // don't worry if right item > max time... that's what we want anyway.
      $hi = $this->m_bsearch($this->m_timeRange[1],$this->m_timeTable);
      array_splice($a,$hi-$lo+1);
    }
    return $a;
  } // END: function m_extractTimeRange($a)


  /**
   * Return index of left edge that matches or preceeds $needle
   *
   * @param mixed &$needle Something to look for (<> comparable)
   * @param array &$haystack An array of items to compare to.
   * @param int $lo Internal min index to comapre.
   * @param int $hi Internal max index to comapre.
   * @return int The index of the item <= $needle; -1 if item[0] > needle
   */
  function m_bsearch(&$needle,&$haystack,$lo=0,$hi=null) {
    if( $hi===null ) {
      if( $needle < $haystack[0] ) {
      // initial execution: check if left edge too high.
        return -1;
      }
      $hi=count($haystack)-1;
    }
    if( $lo >= $hi ) {
      return $lo;
    }
    $mid = ($lo+$hi+1)>>1;
    if( $needle < $haystack[$mid] ) { 
      return $this->m_bsearch($needle,$haystack,$lo,$mid-1);
    }
    if( $needle > $haystack[$mid] ) { 
      return $this->m_bsearch($needle,$haystack,$mid,$hi);
    }
    return $mid;
  } // END: function m_bsearch(&$needle,&$haystack,$lo=0,$hi=null)


  function m_flatten(&$a) { 
    if( !is_array($a) ) { 
      return array($a);
    }
    $b = array();
    foreach($a as $i) { 
      if( is_array($i) ) { 
        $b = array_merge($b,$this->m_flatten($i));
      } else { 
        $b[] = $i;
      }
    }
    return $b;
  } // END: function m_flatten(&$a)


} // END: class WXT520

// EOF -- WXT520.php
?>

