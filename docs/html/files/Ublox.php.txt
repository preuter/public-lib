<?php
 /**
  * Parse a file containing Ublox binary data.
  *
  * @file Ublox.php
  * @date 2010-05-26 13:31 PDT
  * @author Paul Reuter
  * @version 1.1.1
  *
  * @modifications <pre>
  * 1.0.0 - 2010-05-25 - Created with help from NetCDF.php
  * 1.1.0 - 2010-05-26 - Added ACK, CFG classes and error/warning control.
  * 1.1.1 - 2010-05-26 - BugFix: Class inheritance in static context is wack.
  * </pre>
  */



/**
 * Ublox Binary File Parser.
 * @package Parser
 */
class Ublox {
  /**
   * @access private
   */
  var $fpath;
  /**
   * @access private
   */
  var $m_fp;
  /**
   * @access private
   */
  var $m_length;
  /**
   * @access private
   */
  var $messages = array();
  /**
   * @access private
   */
  var $classes = array();

  /**
   * @access private
   */
  var $opts = array(
    'suppressErrors' => false,
    'suppressWarnings' => false,
    'error_handler' => E_USER_WARNING,
    'warning_handler' => E_USER_NOTICE
  );


  /**
   * Constructor
   *
   * @access public
   * @param string $fpath File to read (optional)
   * @return new Ublox object
   */
  function Ublox($fpath=null) { 
    $this->setFile($fpath);
    $this->classes['NAV'] = new Ublox_NAV();
    $this->classes['ACK'] = new Ublox_ACK();
    $this->classes['CFG'] = new Ublox_CFG();
    return $this;
  } // END: function Ublox($fpath)


  /**
   * Toggle to exit script on first error encountered in file.
   *
   * @access public
   * @param bool $b true to exit on error, false to continue
   * @return bool always true.
   */
  function failOnError($b=true) { 
    $this->opts['error_handler'] = ($b) ? E_USER_ERROR : E_USER_WARNING;
    $this->suppressErrors(false);
    return true;
  } // END: function failOnError($b=true)


  /**
   * Toggle to exit script on first warning encountered in file.
   *
   * @access public
   * @param bool $b true to exit on warning, false to continue
   * @return bool always true.
   */
  function failOnWarning($b=true) { 
    $this->opts['warning_handler'] = ($b) ? E_USER_ERROR : E_USER_NOTICE;
    $this->suppressWarnings(false);
    return true;
  } // END: function failOnWarning($b=true)


  /**
   * Toggle to suppress error messages
   *
   * @access public
   * @param bool $b true to suppress error messages, false to show.
   * @return bool always true.
   */
  function suppressErrors($b=true) { 
    $this->opts['suppressErrors'] = ($b) ? true : false;
    return true;
  } // END: function suppressErrors($b=true)


  /**
   * Toggle to suppress warning messages
   *
   * @access public
   * @param bool $b true to suppress warning messages, false to show.
   * @return bool always true.
   */
  function suppressWarnings($b=true) { 
    $this->opts['suppressWarnings'] = ($b) ? true : false;
    return true;
  } // END: function suppressWarnings($b=true)


  /**
   * Assign which file to parse.
   *
   * @access public
   * @param string $fpath Path to file to parse.
   * @return bool always true
   */
  function setFile($fpath) {
    $this->reset();
    $this->fpath = $fpath;
    if( file_exists($fpath) ) {
      $this->m_fp = @fopen($fpath,'rb');
      $this->m_length = filesize($fpath);
    }
    return true;
  } // END: function setFile($fpath)


  /**
   * Clean up and reset parser handling. Closes open files.
   *
   * @access public
   * @return bool always true
   */
  function reset() { 
    if( $this->m_fp ) { 
      @fclose($this->m_fp);
    }
    $this->m_fp = null;
    $this->fpath = null;
    $this->m_fp = null;
    $this->m_length = null;
    $this->messages = array();
    return true;
  } // END: function reset()


  /**
   * Pass-through for file reading.
   *
   * @access protected
   * @return bool true if possible, false on error.
   */
  function seek_start() { 
    // Reset internal file pointer to first record in file.
    return ( fseek($this->m_fp,0,SEEK_SET) && $this->seek_next() );
  } // END: function seek_start()


  /**
   * Find next message to parse.
   *
   * @access protected
   * @return bool true if possible, false on error.
   */
  function seek_next() { 
    $seek_cur = ftell($this->m_fp);
    $seek_max = $this->m_length - 8;
    if( $seek_cur > $seek_max ) {
      // 2 bytes sync, 1 byte class, 1 byte id, 2 bytes checksum
      return false;
    }

    while( !feof($this->m_fp) && $seek_cur < $seek_max ) { 
      // read big-endian unsigned short
      $sync = $this->m_read_int16_be(false);
      // look for sync bytes [0xB5 0x62]
      if( $sync === 0xb562 ) { 
        // found message, move message to official start
        fseek($this->m_fp,$seek_cur,SEEK_SET);
        return true;
      }
      // not found, advance 1 (since fread advanced 2, go back 1).
      $seek_cur += 1;
      fseek($this->m_fp,$seek_cur,SEEK_SET);
    }
    return false;
  } // END: function seek_next()


  /**
   * Read, parse, verify the message at the current file offset.
   *
   * @access public
   * @return mixed false on eof, null on invalid, or hash of message digest.
   */
  function read_message() {
    if( feof($this->m_fp) ) { 
      return false;
    }

    // get start of message
    $seek_cur = ftell($this->m_fp);

    if( $seek_cur === $this->m_length ) { 
      // EOF, but not beyond.
      return false;
    }

    // Check to see if we've parsed this message already.
    if( isset($this->messages[$seek_cur]) ) { 
      // return parsed message
      return $this->message[$seek_cur];
    }
    
    // Test for end of incomplete file
    if( $seek_cur > $this->m_length-8 ) {
      return false;
    }

    // get length of variable payload
    fseek($this->m_fp,$seek_cur + 4, SEEK_SET);
    $length = $this->m_read_int16_le(false);

    // get all bytes of message
    fseek($this->m_fp,$seek_cur, SEEK_SET);
    $bytes = fread($this->m_fp,$length+8);

    // If not valid message, look for start of next message and return null
    if( !$this->validate_checksum($bytes) ) {
      if( !$this->opts['suppressWarnings'] ) { 
        trigger_error(
          'Invalid checksum in file: '.$this->fpath.
          ' at byte: '.ftell($this->m_fp),
          $this->opts['warning_handler']
        );
      }
      // error_log("Invalid checksum.");
      fseek($this->m_fp,$seek_cur+1,SEEK_SET);
      $this->seek_next();
      return null;
    }
    $class = ord($bytes{2});
    $id = ord($bytes{3});
    $payload = substr($bytes,6,$length);
    $message = $this->digest_payload($class,$id,$payload);
    $this->messages[$seek_cur] = $message;
    if( $message === false && !$this->opts['suppressErrors'] ) { 
      trigger_error(
        'Invalid message: '.sprintf("0x%02X 0x%02X",$class,$id).
        ' in file: '.$this->fpath.' at byte: '.ftell($this->m_fp),
        $this->opts['error_handler']
      );
    }
    if( $message === null && !$this->opts['suppressWarnings'] ) { 
      trigger_error(
        'Unsupported message: '.sprintf("0x%02X 0x%02X",$class,$id).
        ' in file: '.$this->fpath.' at byte: '.ftell($this->m_fp),
        $this->opts['warning_handler']
      );
    }
    return $message;
  } // END: function read_message()


  /**
   * Parse the message - decide how with message types.
   *
   * @access protected
   * @param uint $class message type/class
   * @param uint $id ID of message.
   * @param binary $payload Content of message.
   */
  function digest_payload($class,$id,$payload) { 
    switch($class) { 
      case 0x01:  return $this->classes["NAV"]->parse($id,$payload);
      case 0x05:  return $this->classes["ACK"]->parse($id,$payload);
      case 0x06:  return $this->classes["CFG"]->parse($id,$payload);
      default: 
        if( !$this->opts['suppressWarnings'] ) { 
          trigger_error(
            'Unsupported class: '.$this->getClassName($class).
            ' in file: '.$this->fpath.' at byte: '.ftell($this->m_fp), 
            $this->opts['warning_handler']
          );
        }
    }
    return null;
  } // END: function digest_payload($class,$id,$payload)


  /**
   * Identify message class name from code.
   *
   * @access public
   * @param uint $class_id Class code to obtain class name from.
   */
  function getClassName($class_id) { 
    switch($class_id) { 
      case 0x01: return 'NAV';
      case 0x02: return 'RXM';
      case 0x04: return 'INF';
      case 0x05: return 'ACK';
      case 0x06: return 'CFG';
      case 0x0A: return 'MON';
      case 0x0B: return 'AID';
      case 0x0D: return 'TIM';
    }
    if( !$this->opts['suppressWarnings'] ) { 
      trigger_error(
        'Unrecognized class id: '.sprintf("0x%02X",$class_id).
        ' in file: '.$this->fpath.' at byte: '.ftell($this->m_fp),
        $this->opts['warning_handler']
      );
    }
    return $class_id;
  } // END: function getClassName($class_id)


  /**
   * Emit bit string as hexidecimal to stdout.
   *
   * @access public
   * @static
   * @param bytes $bytes Bitstring to emit as hexidecimal.
   * @return bool always true
   */
  public static function display_hex($bytes) {
    for($i=0,$n=strlen($bytes); $i<$n; $i++) { 
      printf("x%02X ",ord($bytes{$i}));
      if( $i%8==7 ) { 
        echo("\n");
      }
    }
    return true;
  } // END: function display_hex($bytes)


  /**
   * Read a short in Big Endian storage from file at current location.
   *
   * @access private
   * @param bool $signed Indicate whether data should be signed or unsigned.
   * @return int16 A 16-bit integer.
   */
  function m_read_int16_be($signed=true) { 
    $up = unpack("n",fread($this->m_fp,2));
    return ($signed && $up[1] & 0x8000) ? $up[1] | 0xffff0000 : $up[1];
  } // END: function m_read_int16_be($signed=true)


  /**
   * Read a short in Little Endian storage at current location.
   *
   * @access private
   * @param bool $signed Indicate whether data should be signed or unsigned.
   * @return int16 A 16-bit integer.
   */
  function m_read_int16_le($signed=true) { 
    $up = unpack("v",fread($this->m_fp,2));
    return ($signed && $up[1] & 0x8000) ? $up[1] | 0xffff0000 : $up[1];
  } // END: function m_read_int16_le($signed=true)


  /**
   * Calculate a checksum using RFC-1145 (8-bit Fletcher Algorithm)
   *
   * @see validate_checksum
   * @access public
   * @param string $bytes An array of UBX bytes incl. sync and checksum.
   * @return array Two checksum bytes stored as array.
   */
  function compute_checksum($bytes) { 
    $a = 0;
    $b = 0;
    for($i=2,$n=strlen($bytes)-2; $i<$n; $i++) {
      $a = ($a + ord($bytes{$i})) & 0xff;
      $b = ($a + $b) & 0xff;
    }
    return array($a,$b);
  } // END: function compute_checksum($bytes)


  /**
   * Verify that the checksum in the message matches a computed checksum.
   *
   * @see compute_checksum
   * @access public
   * @param string $bytes An array of UBX bytes incl. sync and checksum.
   * @return array Two checksum bytes stored as array.
   */
  function validate_checksum($bytes) {
    $n = strlen($bytes);
    list($a,$b) = $this->compute_checksum($bytes);
    return (ord($bytes{$n-2})===$a && ord($bytes{$n-1})===$b);
  } // END: function validate_checksum($bytes)


  /**
   * Convert from WGS84 Lon, Lat, Elev (meters) to ECEF X,Y,Z coordinates.
   *
   * @see http://en.wikipedia.org/wiki/Geodetic_system#Earth_Centred_Earth_Fixed_.28ECEF_or_ECF.29_coordinates
   * @see http://www.ga.gov.au/geodesy/datums/ellipsds.jsp
   *
   * @access public
   * @static
   * @param float $lon WGS84 Longitude degrees
   * @param float $lat WGS84 Latitude degrees
   * @param float $elev Elevation above MSL in meters.
   * @return array of ECEF (x, y, z) coordinates.
   */
  public static function geodeticToECEF($lon,$lat,$elev) {
    $slat = sin( deg2rad($lat) );
    $clat = cos( deg2rad($lat) );
    $slon = sin( deg2rad($lon) );
    $clon = cos( deg2rad($lon) );

    $a = 6378137; // WGS84 semi-major axis a (meters)
    $f = (1/298.257223563);
    $e2 = 2*$f - $f*$f;
    $chi = sqrt( 1 - $e2 * $slat*$slat );

    $aoc = $a/$chi; // the "Normal"
    return array(
      ($aoc + $elev) * $clat * $clon,
      ($aoc + $elev) * $clat * $slon,
      ($aoc * (1-$e2) + $elev) * $slat
    );
  } // END: function geodeticToECEF($lon,$lat,$elev)


  /**
   * Convert ECEF X, Y, Z coordinates to WGS84 Lon, Lat, Elev (meters).
   *
   * @see http://en.wikipedia.org/wiki/Geodetic_system#Earth_Centred_Earth_Fixed_.28ECEF_or_ECF.29_coordinates
   * @see http://www.ga.gov.au/geodesy/datums/ellipsds.jsp
   *
   * @access public
   * @param float $x X axis passes through equator at prime meridian
   * @param float $y Y axis passes through equator at 90d longitude.
   * @param float $z Z axis passes through north pole
   * @return array of WGS84 (lon, lat, elev) coordinates (elev in meters).
   */
  public static function ECEFToGeodetic($x,$y,$z) {
    $a = 6378137; // WGS84 semi-major axis a (meters)
    $b = 6356752.314245; // WGS84 semi-major axis b (meters)

    $if = 298.257223563; // inverse flattening
    $f = 1/$if;
    $ee = 2*$f - $f*$f;
    $eei = $ee / (1-$ee);
    $zz = $z*$z;

    $r = sqrt($x*$x + $y*$y);
    $E2 = $a*$a - $b*$b;
    $F = 54 * $b*$b * $zz;
    $G = $r*$r + (1-$ee)*$zz - $ee*$E2;
    $C = $ee*$ee*$F*$r*$r / ($G*$G*$G);
    $S = pow( 1 + $C + sqrt($C*$C + 2*$C), 1/3 );
    $P_a = ($S + 1/$S + 1);
    $P = $F/( 3* $P_a*$P_a * $G*$G );
    $Q = sqrt( 1 + 2 * $ee*$ee * $P );
    $r0_a = (0 - ($P*$ee*$r)) / (1+$Q);
    $r0_c = ($P*(1-$ee)*$zz)/($Q*(1+$Q));
    $r0 = $r0_a + sqrt(0.5*$a*$a*(1+1/$Q) - $r0_c - (0.5*$P*$r*$r));
    $UV_a = $r - $ee*$r0;
    $U = sqrt( $UV_a*$UV_a + $zz );
    $V = sqrt( $UV_a*$UV_a + (1-$ee)*$zz );
    $Z0 = ($b*$b*$z) / ($a*$V);
    $h = $U * (1-($b*$b)/($a*$V));

    $lat = atan( ($z + $eei*$Z0) / $r);
    $lon = atan2( $y, $x );

    return array( rad2deg($lon), rad2deg($lat), $h );
  } // END: function ECEFToGeodetic($x,$y,$z)



  /**
   * Tests $flags for value set.
   * When set, adds $map[$flag[i]]'s value to an array.
   *
   * @access public
   * @static
   * @param uint $flags A bitmap of flags set.
   * @param array $map An array of bit values 1,2,4,8,16... mapped to values.
   * @return array An array of values, keyed by bit value.
   */
  public static function bitmask($flags,$map) { 
    $result = array();
    foreach( array_keys($map) as $bit ) { 
      if( $flags & $bit) { 
        $result[$bit] = $map[$bit];
      }
    }
    return $result;
  } // END: function bitmask($flags,$map)


  /**
   * Converts a number to a value.
   *
   * @access public
   * @static
   * @param uint $i A number identifying an enumerated value.
   * @param array $map A keyed array of num => value.
   * @return mixed The value of $map[$i] or null if not found.
   */
  public static function enum($i,$map) {
    return (isset($map[$i])) ? $map[$i] : null;
  } // END: function enum($i,$map)


  // 1-byte bitmap (an unsigned char)
  public static function getX1( $bytes ) { 
    return ord($bytes{0});
  }


  // 2-byte bitmap (an unsigned short, little-endian)
  public static function getX2( $bytes ) { 
    $up = unpack("v",$bytes);
    return $up[1];
  }


  // 4-byte bitmap (an unsigned int, little-endian)
  public static function getX4( $bytes ) { 
    $up = unpack("V",$bytes);
    return $up[1];
  }


  // 1-byte unsigned char
  public static function getU1( $bytes ) { 
    return ( ord($bytes{0}) );
  }


  // 2-byte unsigned short  (little-endian)
  public static function getU2( $bytes ) { 
    $up = unpack("v",$bytes);
    return $up[1];
  }


  // 4-byte unsigned int (little-endian)
  public static function getU4( $bytes ) { 
    // unsigned int
    $up = unpack("V",$bytes);
    // Supposedly, this hack will overcome PHP's signed int limitation.
    return ($up[1] & 0x80000000) ? $up[1] + 0xffffffff : $up[1];
  }


  // 1-byte signed char
  public static function getI1( $bytes ) {
    $val = ord($bytes{0});
    return ($val & 0x80) ? (0xffffff00 | $val) : $val;
  }


  // 2-byte signed short (little-endian)
  public static function getI2( $bytes ) { 
    // unsigned short
    $up = unpack("v",$bytes);
    // apply leading sign bits
    return ($up[1] & 0x8000) ? (0xffff0000 | $up[1]) : $up[1];
  }


  // 4-byte signed int (little-endian)
  public static function getI4( $bytes ) { 
    // unsigned int
    $up = unpack("V",$bytes);
    return $up[1];
  }


  // 4-byte floating point (IEEE 754 Single Precision)
  public static function getR4( $bytes ) { 
    $up = unpack("f",$bytes);
    return $up[1];
  }


  // 8-byte double (IEEE 754 Double Precision)
  public static function getR8( $bytes ) { 
    $up = unpack("d",$bytes);
    return $up[1];
  }


  // ASCII / ISO-8859-1 Encoding
  public static function getCH( $bytes, $len=1 ) { 
    return substr($bytes,0,$len);
  }


} // END: class Ublox



/**
 * helper class for parsing NAV blocks.
 */
class Ublox_NAV  {


  function parse($id,$payload) { 
    switch($id) { 
      case 0x02: return $this->parse_x02($payload);
      case 0x06: return $this->parse_x06($payload);
      case 0x12: return $this->parse_x12($payload);
      case 0x21: return $this->parse_x21($payload);
      case 0x30: return $this->parse_x30($payload);
      default:
        // error_log("Unsupported NAV id(".sprintf("0x%02X",$id).")");
    }
    return null;
  }

  function parse_x02($payload) { 
    if( strlen($payload) != 28 ) { 
      // error_log("Invalid NAV-POSLLH payload.");
      return false;
    }
    $msg = array(
      'class' => 'NAV',
      'id' => 'POSLLH',
      'iTOW' => Ublox::getU4( substr($payload,0,4) ),
      'lon' => Ublox::getI4( substr($payload,4,4) ) * 1e-7,
      'lat' => Ublox::getI4( substr($payload,8,4) ) * 1e-7,
      'height' => Ublox::getI4( substr($payload,12,4) ),
      'hMSL' => Ublox::getI4( substr($payload,16,4) ),
      'hAcc' => Ublox::getU4( substr($payload,20,4) ),
      'vAcc' => Ublox::getU4( substr($payload,24,4) )
    );
    $msg['lon'] = sprintf("%.7f",$msg['lon']);
    $msg['lat'] = sprintf("%.7f",$msg['lat']);
    return $msg;
  } // END: function parse_x02($payload)
  

  function parse_x06($payload) { 
    if( strlen($payload) != 52 ) { 
      // error_log("Invalid NAV-SOL payload.");
      return false;
    }
    $msg = array(
      'class' => 'NAV',
      'id' => 'SOL',
      'iTOW' => Ublox::getU4( substr($payload,0,4) ),
      'fTOW' => Ublox::getI4( substr($payload,4,4) ),
      'week' => Ublox::getI2( substr($payload,8,2) ),
      'gpsFix' => Ublox::getU1( substr($payload,10,1) ),
      'flags' => Ublox::getX1( substr($payload,11,1) ),
      'ecefX' => Ublox::getI4( substr($payload,12,4) ),
      'ecefY' => Ublox::getI4( substr($payload,16,4) ),
      'ecefZ' => Ublox::getI4( substr($payload,20,4) ),
      'pAcc' => Ublox::getU4( substr($payload,24,4) ),
      'ecefVX' => Ublox::getI4( substr($payload,28,4) ),
      'ecefVY' => Ublox::getI4( substr($payload,32,4) ),
      'ecefVZ' => Ublox::getI4( substr($payload,36,4) ),
      'sAcc' => Ublox::getU4( substr($payload,40,4) ),
      'pDOP' => Ublox::getU2( substr($payload,44,2) ) * 0.01,
      'res1' => Ublox::getU1( substr($payload,46,1) ),
      'numSV' => Ublox::getU1( substr($payload,47,1) ),
      'res2' => Ublox::getU4( substr($payload,48,4) )
    );

    $msg['pDOP'] = sprintf("%.2f",$msg['pDOP']);

    $map = array(
      0=>'No Fix', 1=>'Dead Reckoning only', 2=>'2D-Fix', 3=>'3D-Fix',
      4=>'GPS + dead reckoning combined', 5=>'Time only fix'
    );
    $msg['gpsFix'] = Ublox::enum($msg['gpsFix'],$map);

    $map = array(1=>'GPSfixOK',2=>'DiffSoln',4=>'WKNSET',8=>'TOWSET');
    $msg['flags'] = Ublox::bitmask($msg['flags'],$map);

    return $msg;
  } // END: function parse_x06


  function parse_x12($payload) { 
    if( strlen($payload) != 36 ) { 
      // error_log("Invalid NAV-VELNED payload.");
      return false;
    }
    $msg = array(
      'class' => 'NAV',
      'id' => 'VELNED',
      'iTOW' => Ublox::getU4( substr($payload,0,4) ),
      'velN' => Ublox::getI4( substr($payload,4,4) ),
      'velE' => Ublox::getI4( substr($payload,8,4) ),
      'velD' => Ublox::getI4( substr($payload,12,4) ),
      'speed' => Ublox::getU4( substr($payload,16,4) ),
      'gSpeed' => Ublox::getU4( substr($payload,20,4) ),
      'heading' => Ublox::getI4( substr($payload,24,4) ) * 1e-5,
      'sAcc' => Ublox::getU4( substr($payload,28,4) ),
      'cAcc' => Ublox::getU4( substr($payload,32,4) ) * 1e-5
    );
    
    $msg['heading'] = sprintf("%.5f",$msg['heading']);
    $msg['cAcc'] = sprintf("%.5f",$msg['cAcc']);
    return $msg;
  } // END: function parse_x12($payload)


  function parse_x21($payload) { 
    if( strlen($payload) != 20 ) { 
      // error_log("Invalid NAV-TIMEUTC payload.");
      return false;
    }
    $msg = array(
      'class' => 'NAV',
      'id' => 'TIMEUTC',
      'iTOW' => Ublox::getU4( substr($payload,0,4) ),
      'tAcc' => Ublox::getU4( substr($payload,4,4) ),
      'nano' => Ublox::getI4( substr($payload,8,4) ),
      'year' => Ublox::getU2( substr($payload,12,2) ),
      'month' => Ublox::getU1( substr($payload,14,1) ),
      'day' => Ublox::getU1( substr($payload,15,1) ),
      'hour' => Ublox::getU1( substr($payload,16,1) ),
      'min' => Ublox::getU1( substr($payload,17,1) ),
      'sec' => Ublox::getU1( substr($payload,18,1) ),
      'valid' => Ublox::getX1( substr($payload,19,1) )
    );

    $map = array(1=>'validTOW',2=>'validWKN',4=>'validUTC');
    $msg['valid'] = Ublox::bitmask($msg['valid'],$map);

    return $msg;
  } // END: function parse_x21($payload)


  function parse_x30($payload) { 
    if( (strlen($payload)-8) % 12 != 0 ) { 
      // error_log("Invalid NAV-SVINFO payload.");
      return false;
    }
    $msg = array(
      'class' => 'NAV',
      'id' => 'SVINFO',
      'iTOW' => Ublox::getU4( substr($payload,0,4) ),
      'numCh' => Ublox::getU1( substr($payload,4,1) ),
      'globalFlags' => Ublox::getX1( substr($payload,5,1) ),
      'res2' => Ublox::getU2( substr($payload,6,2) ),
      'channels' => array()
    );

    $map_globalFlags = array(
      1=>'Antaris, Antaris 4', 2=>'u-blox 5', 4=>'u-blox 6'
    );
    $msg['globalFlags'] = Ublox::bitmask($msg['globalFlags'],$map_globalFlags);

    $map_flags = array(
      1=>'svUsed', 2=>'diffCorr', 4=>'orbitAvail', 8=>'orbitEph',
      16=>'unhealthy', 32=>'orbitAlm', 64=>'orbitAop'
    );
    $map_quality = array(
      1=>'idle', 2=>'searching', 4=>'acquired', 8=>'detected, unstable',
      16=>'code lock', 32=>'code and carrier locked', 
      64=>'code and carrier locked', 128=>'code and carrier locked'
    );

    for($i=0,$n=$msg['numCh']; $i<$n; $i++) { 
      $chan = array(
        'chn' => Ublox::getU1( substr($payload,8+12*$i,1) ),
        'svid' => Ublox::getU1( substr($payload,9+12*$i,1) ),
        'flags' => Ublox::getX1( substr($payload,10+12*$i,1) ),
        'quality' => Ublox::getX1( substr($payload,11+12*$i,1) ),
        'cno' => Ublox::getU1( substr($payload,12+12*$i,1) ),
        'elev' => Ublox::getI1( substr($payload,13+12*$i,1) ),
        'azim' => Ublox::getI2( substr($payload,14+12*$i,2) ),
        'prRes' => Ublox::getI4( substr($payload,16+12*$i,4) )
      );
      $chan['flags'] = Ublox::bitmask($chan['flags'],$map_flags);
      $chan['quality'] = Ublox::bitmask($chan['quality'],$map_quality);
      $msg['channels'][] = $chan;
    }
    return $msg;
  } // END: function parse_x30($payload)


} // END: class Ublox_NAV



/**
 * Static class helper for parsing ACK blocks.
 */
class Ublox_ACK {


  function parse($id,$payload) { 
    switch($id) { 
      case 0x00: return $this->parse_x00($payload);
      case 0x01: return $this->parse_x01($payload);
      default:
        // error_log("Unsupported ACK id(".sprintf("0x%02X",$id).")");
    }
    return null;
  }


  function parse_x00($payload) { 
    if( strlen($payload) != 2 ) { 
      // error_log("Invalid ACK-NAK payload.");
      return false;
    }
    $msg = array(
      'class' => 'ACK',
      'id' => 'NAK',
      'clsID' => Ublox::getU1( substr($payload,0,1) ),
      'msgID' => Ublox::getU1( substr($payload,1,1) )
    );
    return $msg;
  } // END: function parse_x00($payload)


  function parse_x01($payload) { 
    if( strlen($payload) != 2 ) { 
      // error_log("Invalid ACK-ACK payload.");
      return false;
    }
    $msg = array(
      'class' => 'ACK',
      'id' => 'ACK',
      'clsID' => Ublox::getU1( substr($payload,0,1) ),
      'msgID' => Ublox::getU1( substr($payload,1,1) )
    );
    return $msg;
  } // END: function parse_x01($payload)


} // END: class Ublox_ACK



/**
 * Static class helper for parsing CFG blocks.
 */
class Ublox_CFG {


  function parse($id,$payload) { 
    switch($id) { 
      case 0x16: return $this->parse_x16($payload);
      case 0x24: return $this->parse_x24($payload);
      default:
        // error_log("Unsupported CFG id(".sprintf("0x%02X",$id).")");
    }
    return null;
  } // END: function parse($id,$payload)


  function parse_x16($payload) { 
    if( strlen($payload) != 8 ) { 
      // error_log("Invalid CFG-SBAS payload.");
      return false;
    }
    $msg = array(
      'class' => 'CFG',
      'id' => 'SBAS',
      'mode' => Ublox::getX1( substr($payload,0,1) ),
      'usage' => Ublox::getX1( substr($payload,1,1) ),
      'maxSBAS' => Ublox::getU1( substr($payload,2,1) ),
      'scanmode2' => Ublox::getX1( substr($payload,3,1) ),
      'scanmode1' => Ublox::getX4( substr($payload,4,4) )
    );

    $map = array(1=>'enabled',2=>'test');
    $msg['mode'] = Ublox::bitmask($msg['mode'],$map);

    $map = array(1=>'range',2=>'diffCorr',4=>'integrity');
    $msg['usage'] = Ublox::bitmask($msg['usage'],$map);

    $map = array(
      1=>'PRN152', 2=>'PRN153', 4=>'PRN154', 8=>'PRN155',
      16=>'PRN156', 32=>'PRN157', 64=>'PRN158'
    );
    $msg['scanmode2'] = Ublox::bitmask($msg['scanmode2'],$map);

    $map = array(
      0x1=>'PRN120',0x2=>'PRN121',0x4=>'PRN122',0x8=>'PRN123',
      0x10=>'PRN124',0x20=>'PRN125',0x40=>'PRN126',0x80=>'PRN127',
      0x100=>'PRN128',0x200=>'PRN129',0x400=>'PRN130',0x800=>'PRN131',
      0x1000=>'PRN132',0x2000=>'PRN133',0x4000=>'PRN134',0x8000=>'PRN135',
      0x10000=>'PRN136',0x20000=>'PRN137',0x40000=>'PRN138',0x80000=>'PRN139',
      0x100000=>'PRN140',0x200000=>'PRN141',0x400000=>'PRN142',0x800000=>'PRN143',
      0x1000000=>'PRN144',0x2000000=>'PRN145',0x4000000=>'PRN146',0x8000000=>'PRN147',
      0x10000000=>'PRN148',0x20000000=>'PRN149',0x40000000=>'PRN150',0x80000000=>'PRN151'
    );
    $msg['scanmode1'] = Ublox::bitmask($msg['scanmode1'],$map);

    return $msg;
  } // END: function parse_x16($payload)


  function parse_x24($payload) { 
    if( strlen($payload) != 0 && strlen($payload) != 36 ) { 
      // error_log("Invalid CFG-NAV5 payload.");
      return false;
    }
    if( strlen($payload) == 0 ) { 
      return array(
        'class' => 'CFG',
        'id' => 'NAV5'
      );
    }
    // else strlen($payload) == 36
    $msg = array(
      'class' => 'CFG',
      'id' => 'NAV5',
      'mask' => Ublox::getX2( substr($payload,0,2) ),
      'dynModel' => Ublox::getU1( substr($payload,2,1) ),
      'fixMode' => Ublox::getU1( substr($payload,3,1) ),
      'fixedAlt' => Ublox::getI4( substr($payload,4,4) ) * 0.01,
      'fixedAltVar' => Ublox::getU4( substr($payload,8,4) ) * 0.0001,
      'minElev' => Ublox::getI1( substr($payload,12,1) ),
      'drLimit' => Ublox::getU1( substr($payload,13,1) ),
      'pDop' => Ublox::getU2( substr($payload,14,2) ) * 0.1,
      'tDop' => Ublox::getU2( substr($payload,16,2) ) * 0.1,
      'pAcc' => Ublox::getU2( substr($payload,18,2) ),
      'tAcc' => Ublox::getU2( substr($payload,20,2) ),
      'staticHoldThresh' => Ublox::getU1( substr($payload,22,1) ),
      'dgpsTimeOut' => Ublox::getU1( substr($payload,23,1) ),
      'res2' => Ublox::getU4( substr($payload,24,4) ),
      'res3' => Ublox::getU4( substr($payload,28,4) ),
      'res4' => Ublox::getU4( substr($payload,32,4) ),
    );
    
    $map = array(
      1=>'dyn', 2=>'minEl', 4=>'fixMode', 8=>'drLim', 16=>'posMask',
      32=>'timeMask', 64=>'staticHoldMask', 128=>'dgpsMask'
    );
    $msg['mask'] = Ublox::bitmask($msg['mask'],$map);

    return $msg;
  } // END: function parse_x24($payload)


} // END: class Ublox_CFG


// EOF -- Ublox.php
?>

